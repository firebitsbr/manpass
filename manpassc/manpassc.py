#!/usr/bin/env python
# -*- coding: UTF-8 -*-
#
# generated by wxGlade 0.7.0 on Mon Jul 13 05:41:37 2015
#

import wx

# begin wxGlade: dependencies
import gettext
# end wxGlade

import common
import os.path
import loginDiag
import apiclient
import addDiag
import myoptions
import unlockDiag
import listAllPass
import changeMasterPassDiag
import wx.dataview
import shlex
import subprocess
import threading

# begin wxGlade: extracode
# end wxGlade
_ = wx.GetTranslation



class cnsort:
    #based on the code from henrysting@gmail.com, change a bit
    def __init__(self):
    # create Pinyin dict
        self.dic_py = dict()
        try:
            f_py = open(common.cur_file_dir()+'/py.dat',"r")
        except:
            return None
        content_py = f_py.read()
        lines_py = content_py.split('\n')
        n=len(lines_py)
        for i in range(0,n-1):
            word_py, mean_py = lines_py[i].split('\t', 1)#将line用\t进行分割，最多分一次变成两块，保存到word和mean中去
            self.dic_py[word_py]=mean_py
        f_py.close()



    # 辞典查找函数
    def searchdict(self,dic,uchar):
        if isinstance(uchar, str):
            uchar = unicode(uchar,'utf-8')
        if uchar >= u'\u4e00' and uchar<=u'\u9fa5':
            value=dic.get(uchar.encode('utf-8'))
            if value == None:
                value = '*'
        else:
            value = uchar
        if isinstance(value,str):
            return value.decode('gbk')
        else:
            return value


    # 将一个字符串转换成一个含每个字拼音的list，字符串中的连续的ASCII会按原样放在一个值内
    def strToPYS(self,istr):
        if isinstance(istr,str):
            istr=istr.decode('gbk')
            istr=istr.encode('utf-8')
            istr=istr.decode('utf-8')
        else:
            if isinstance(istr,unicode):
                istr=istr.encode('utf-8')
                istr=istr.decode('utf-8')
            else:
                return None
        rstr=''
        for ichr in istr:
           if ord(ichr)<=255:rstr+=ichr
           else:
               rstr+=self.searchdict(self.dic_py,ichr)[:-1]
        return rstr


def PauseLockWhileBusy(func):
    def func_wrapper(*args, **kwds):
        args[0].GetParent().canlock=False
        func(*args, **kwds)
        args[0].GetParent().canlock=True
    return func_wrapper

class PassListCtrl(wx.dataview.DataViewListCtrl):
    def __init__(self,parent,filter_txtctrl):
        wx.dataview.DataViewListCtrl.__init__(self,parent,wx.ID_ANY)
        self.AppendTextColumn(_("Website/Application"))
        self.AppendTextColumn(_("Username"))
        self.AppendTextColumn(_("Password"),mode=wx.dataview.DATAVIEW_CELL_ACTIVATABLE)
        self.AppendTextColumn(_("Creation time"))
        self.AppendTextColumn(_("Rev"))
        self.fctrl=filter_txtctrl
        self.filterme=True


        self.apc=self.GetParent().apiclient
        self.Bind(wx.dataview.EVT_DATAVIEW_ITEM_ACTIVATED,self.OnDClick,self)
        self.Bind(wx.dataview.EVT_DATAVIEW_ITEM_CONTEXT_MENU,self.OnPopMenu,self)

        self.passlist=[]
        self.cnsort=cnsort()
        self.createPopMenu()




    def getList(self):
        self.GetParent().setStatusTxt(_("Loading..."))
        self.GetParent().progress_bar.SetValue(0)
        self.GetParent().showLoading()
        t=threading.Thread(target=self.apc.getAllLatest, args=(self.GetParent(),))
        t.daemon=True
        t.start()
##        try:
##
##            self.passlist=self.apc.getAllLatest(self.GetParent().progress_bar)
##        except Exception as Err:
##            wx.MessageBox(_("Unable to get saved credentials!\n")+unicode(Err),_("Error"),0|wx.ICON_ERROR,self)
##            self.Close()
##            return
##        for p in self.passlist:
##            p["PYS"]=self.cnsort.strToPYS(p["Meta"].lower())
##        self.GetParent().unlock()
##        self.GetParent().setStatusTxt(_("Done."))

    def reloadWithoutGet(self):
        self.DeleteAllItems()
        if len(self.passlist)==0:
            return
        filter_key=self.fctrl.GetValue().strip()
        i=0
        for p in self.passlist:
            data=[p['Meta'],p['Uname'],u"****",p['Pass_time'],p['Pass_rev']]
            if filter_key=="" or not self.filterme:
                self.AppendItem(data,i)
            else:
                if p['PYS'].find(filter_key) !=-1:
                    self.AppendItem(data,i)
            i+=1


    def reload(self,filterme=True):
        #reload the list
        self.GetParent().canlock=False
        self.getList()
        self.filterme=filterme
##        self.reloadWithoutGet()


    def OnDClick(self,evt):
        item=evt.GetItem()
        i=self.GetItemData(item)
        self.copyInfoToClip(i)


    def copyInfoToClip(self,i,dkey="Pass"):
        if i < len(self.passlist) and not wx.TheClipboard.IsOpened():
            cdata=wx.TextDataObject()
            cdata.SetText(self.passlist[i][dkey])
            wx.TheClipboard.Open()
            wx.TheClipboard.SetData(cdata)
            wx.TheClipboard.Close()
            itemname=""
            if dkey=="Pass": itemname=_("Password")
            if dkey=="Uname": itemname=_("Username")
            dlg = wx.MessageDialog(self, itemname+_(' Copied to Clipboard'),
                           _('Done'),
                           wx.OK | wx.ICON_INFORMATION
                                                          )
        else:
            dlg = wx.MessageDialog(self,itemname+_(' Copy Failed'),
                           _('Error'),
                           wx.OK | wx.ICON_ERROR
                                                          )

        dlg.ShowModal()
        dlg.Destroy()


    def createPopMenu(self):
        self.pmenu=wx.Menu()
        mitem=self.pmenu.Append(wx.NewId(),_("Copy Username"))
        self.Bind(wx.EVT_MENU, self.OnCopyUname, id=mitem.GetId())
        self.pmenu.AppendSeparator()
        mitem=self.pmenu.Append(wx.NewId(),_("Add ..."))
        self.Bind(wx.EVT_MENU, self.OnAdd, id=mitem.GetId())
        mitem=self.pmenu.Append(wx.NewId(),_("Reload"))
        self.Bind(wx.EVT_MENU, self.OnReload, id=mitem.GetId())
        self.pmenu.AppendSeparator()
        mitem=self.pmenu.Append(wx.NewId(),_("Change ..."))
        self.Bind(wx.EVT_MENU, self.OnChangePass, id=mitem.GetId())
        mitem=self.pmenu.Append(wx.NewId(),_("List history passwords ..."))
        self.Bind(wx.EVT_MENU, self.OnListAllPass, id=mitem.GetId())
        mitem=self.pmenu.Append(wx.NewId(),_("Delete"))
        self.Bind(wx.EVT_MENU, self.OnDel, id=mitem.GetId())
        self.pmenu.AppendSeparator()
        mitem=self.pmenu.Append(wx.NewId(),_("Lock"))
        self.Bind(wx.EVT_MENU, self.OnLock, id=mitem.GetId())
        mitem=self.pmenu.Append(wx.NewId(),_("Option"))
        self.Bind(wx.EVT_MENU, self.OnOption, id=mitem.GetId())
        mitem=self.pmenu.Append(wx.NewId(),_("Change master password..."))
        self.Bind(wx.EVT_MENU, self.OnChangeMasterPass, id=mitem.GetId())
        self.pmenu.AppendSeparator()
        mitem=self.pmenu.Append(wx.NewId(),_("About"))
        self.Bind(wx.EVT_MENU, self.OnAbout, id=mitem.GetId())
        mitem=self.pmenu.Append(wx.NewId(),_("Exit"))
        self.Bind(wx.EVT_MENU, self.OnExit, id=mitem.GetId())



    def OnPopMenu(self,evt):
        self.PopupMenu(self.pmenu)

    @PauseLockWhileBusy
    def OnDel(self,evt):
        #delete all saved password for the meta-id
        sel_item=self.GetSelection()
        if not sel_item.IsOk():
            wx.MessageBox(_("Select a line first!"),_("Error"),0|wx.ICON_ERROR,self)
            return
        i=self.GetItemData(sel_item)
        dlg=wx.MessageDialog(self, _("Are you sure to delete ALL saved passwords for ")+self.passlist[i]['Meta']+", "+self.passlist[i]['Uname']+"?", _("Are you sure?"), wx.YES_NO | wx.ICON_QUESTION|wx.NO_DEFAULT)
        if dlg.ShowModal()==wx.ID_YES:
            try:
                self.apc.remove(self.passlist[i]['Meta'],self.passlist[i]['Uname'])
            except Exception as Err:
                print Err
                wx.MessageBox(_("Unable to remove credential from DB!\n")+unicode(Err),_("Error"),0|wx.ICON_ERROR,self)
                return

            del self.passlist[i]
            self.reloadWithoutGet()

    @PauseLockWhileBusy
    def OnChangePass(self,evt):
        #create a new rev of password
        sel_item=self.GetSelection()
        if not sel_item.IsOk():
            wx.MessageBox(_("Select a line first!"),_("Error"),0|wx.ICON_ERROR,self)
            return
        i=self.GetItemData(sel_item)
        dlg=addDiag.AddPassDiag(self,self.passlist[i]['Meta'],self.passlist[i]['Uname'],self.passlist[i]['Pass'])
        if dlg.ShowModal()==wx.ID_OK:
            try:
                self.apc.add(dlg.meta,dlg.uname,dlg.upass)
            except Exception as Err:
                wx.MessageBox(_("Unable to save credential!\n")+unicode(Err),_("Error"),0|wx.ICON_ERROR,self)
                return
            try:
                r=self.apc.get(self.passlist[i]['Meta'],self.passlist[i]['Uname'])
                del self.passlist[i]
                r["PYS"]=self.cnsort.strToPYS(r["Meta"].lower())
                self.passlist.insert(i,r)
                self.reloadWithoutGet()
            except:
                wx.MessageBox(_("Getting latest record failed!\n")+unicode(Err),_("Error"),0|wx.ICON_ERROR,self)
                return



    def OnCopyUname(self,evt):
        sel_item=self.GetSelection()
        if not sel_item.IsOk():
            wx.MessageBox(_("Select a line first!"),_("Error"),0|wx.ICON_ERROR,self)
            return
        i=self.GetItemData(sel_item)
        self.copyInfoToClip(i,"Uname")


    def OnReload(self,evt):
        self.reload()

    def OnAdd(self,evt):
        dlg=addDiag.AddPassDiag(self)
        if dlg.ShowModal()==wx.ID_OK:
            #self.apc.add(dlg.meta,dlg.uname,dlg.upass)
            try:
                self.apc.add(dlg.meta,dlg.uname,dlg.upass)
            except Exception as Err:
                print Err
                wx.MessageBox(_("Unable to save credential!\n")+unicode(Err),_("Error"),0|wx.ICON_ERROR,self)
                return
            try:
                r=self.apc.get(dlg.meta,dlg.uname)
                r["PYS"]=self.cnsort.strToPYS(r["Meta"].lower())
                self.passlist.insert(0,r)
                self.reloadWithoutGet()
            except:
                wx.MessageBox(_("Getting latest record failed!\n")+unicode(Err),_("Error"),0|wx.ICON_ERROR,self)
                return
    @PauseLockWhileBusy
    def OnChangeMasterPass(self,evt):
        dlg=changeMasterPassDiag.ChangeMasterPassDiag(self)
        if dlg.ShowModal()==wx.ID_OK:
            self.reload()

    @PauseLockWhileBusy
    def OnListAllPass(self,evt):
        sel_item=self.GetSelection()
        if not sel_item.IsOk():
            wx.MessageBox(_("Select a line first!"),_("Error"),0|wx.ICON_ERROR,self)
            return
        i=self.GetItemData(sel_item)
        dlg=listAllPass.ListAllPassDiag(self,self.passlist[i]['Meta'],self.passlist[i]['Uname'],self.apc)
        dlg.ShowModal()
        try:
            r=self.apc.get(self.passlist[i]['Meta'],self.passlist[i]['Uname'])
            if r!=None:
                r["PYS"]=self.cnsort.strToPYS(r["Meta"].lower())
                self.passlist.insert(i,r)
            del self.passlist[i]
            self.reloadWithoutGet()
        except Exception as Err:
            wx.MessageBox(_("Getting latest record failed!\n")+unicode(type(Err))+" "+unicode(Err),_("Error"),0|wx.ICON_ERROR,self)
            return

    @PauseLockWhileBusy
    def OnOption(self,evt):
        self.GetParent().showOptionDiag()
    @PauseLockWhileBusy
    def OnAbout(self,evt):
        self.GetParent().ShowAbout()

    def OnExit(self,evt):
        self.GetParent().ExitMe()

    def OnLock(self,evt):
        self.GetParent().lock()



class MainPannel(wx.Frame):
    def __init__(self, *args, **kwds):
        # begin wxGlade: MainPannel.__init__
        self.version=1.0
        self.canlock=True
        kwds['size']=(1000,1000)
        wx.Frame.__init__(self, *args, **kwds)
        self.icon=wx.Icon(os.path.join(common.cur_file_dir(),"manpassc.ico"),wx.BITMAP_TYPE_ICO)
        self.SetIcon(self.icon)
        diag=loginDiag.LoginDiag(self)
        diag.CentreOnScreen()
        if diag.ShowModal()!=wx.ID_OK:
            self.Close()
            return
        #username, password must be encoded into utf-8 string before they could be used by crypto functions
        self.uname=diag.text_ctrl_uname.GetValue().strip().encode('utf-8')
        self.upass=diag.text_ctrl_upass.GetValue().encode('utf-8')
        self.lock_label=wx.HyperlinkCtrl(self,wx.ID_ANY,_("Unlock Me"),style=wx.HL_ALIGN_CENTRE)
        self.progress_bar=wx.Gauge(self,wx.ID_ANY)
        self.status_bar=wx.StatusBar(self,wx.ID_ANY)
        self.SetStatusBar(self.status_bar)

        defconflist=[
        (_("Basic Options"),
                [(("addr"),{"desc":_("listening address"),"value":"127.0.0.1","type":"string"}),
                 (("port"),{"desc":_("listening port"),"value":9000,"type":"int"}),
                 (("idle_timer"),{"desc":_("idle lock timer(seconds)"),"value":60,"type":"int"}),
                    ]
            ),
        ]
        self.OptionDiag=myoptions.OptionDiag(self,"manpass.conf",defconflist,self.uname)
        self.confDict=None
        self.confDict=self.OptionDiag.toDict()
        cmd=os.path.join(common.cur_file_dir(),"manpassd.exe")
        exename=cmd

        cmd+=" -username={uname} -pipepass=true -svrip={ip} -svrport={port}".format(uname=self.uname,ip=self.confDict['addr'],port=self.confDict['port'])
        args=shlex.split(cmd)
        startupinfo = subprocess.STARTUPINFO()
        startupinfo.dwFlags|= subprocess.STARTF_USESHOWWINDOW
        p=subprocess.Popen(args,executable=exename, stdin=subprocess.PIPE,shell=False,startupinfo=startupinfo)
        p.stdin.write(self.upass+"\n")
        p.stdin.close()

        try:
            cadata=apiclient.loadCAFile(self.uname,self.upass,self.confDict['confDir'])
        except Exception as Err:
            wx.MessageBox(_("Authentication Failed!\n")+unicode(Err),_("Error"),0|wx.ICON_ERROR,self)
            self.Close()
            return
        try:
            self.apiclient=apiclient.APIClient(self.confDict['addr'],self.confDict['port'],cadata,
            os.path.join(self.confDict["confDir"],"ee.cert"),
            os.path.join(self.confDict["confDir"],"ee.key"),self.upass)
        except:
            wx.MessageBox(_("Failed to connect to the server!"),_("Error"),0|wx.ICON_ERROR,self)
            self.Close()
            return

        self.SetTitle("Manpass - "+self.uname.decode("utf-8"))
        self.taskicon=wx.TaskBarIcon()
        self.taskicon.SetIcon(self.icon)
        wx.EVT_TASKBAR_LEFT_DCLICK(self.taskicon,self.OnDClickTaskIcon)
        self.timer_lock=wx.Timer(self)
        self.timer_lock.Start(self.confDict['idle_timer']*1000,wx.TIMER_CONTINUOUS)
        self.text_ctrl_search_input = wx.SearchCtrl(self, wx.NewId(),"")
        self.list_ctrl_1 = PassListCtrl(self,self.text_ctrl_search_input)


        self.Bind(wx.EVT_TIMER,self.OnTimer)
        self.Bind(wx.EVT_TEXT,self.OnFilter,self.text_ctrl_search_input)
        self.text_ctrl_search_input.Bind(wx.EVT_SET_FOCUS,self.OnFilterAct)
        self.text_ctrl_search_input.Bind(wx.EVT_CHAR,self.OnChar)
##        self.text_ctrl_search_input.Bind(wx.EVT_SET_FOCUS,self.OnFilterAct)

        self.__set_properties()
        self.__do_layout()
        self.CentreOnScreen()
        self.Show()
        self.SetSize((400,400))
        self.list_ctrl_1.reload()
        self.text_ctrl_search_input.SetFocus()
        self.text_ctrl_search_input.SetValue("")

        self.Bind(wx.EVT_CLOSE,self.HideMe)
        #self.Bind(wx.EVT_ICONIZE,self.HideMe)
        self.lock_label.Bind(wx.EVT_HYPERLINK,self.OnUnlock)

        self.text_ctrl_search_input.Bind(wx.EVT_CHAR,self.resetTimer)

        self.list_ctrl_1.Bind(wx.dataview.EVT_DATAVIEW_SELECTION_CHANGED,self.resetTimer)
        self.list_ctrl_1.Bind(wx.dataview.EVT_DATAVIEW_ITEM_ACTIVATED,self.resetTimer)
        self.list_ctrl_1.Bind(wx.dataview.EVT_DATAVIEW_COLUMN_HEADER_CLICK,self.resetTimer)
        self.list_ctrl_1.Bind(wx.dataview.EVT_DATAVIEW_COLUMN_HEADER_RIGHT_CLICK,self.resetTimer)
        self.list_ctrl_1.Bind(wx.dataview.EVT_DATAVIEW_ITEM_CONTEXT_MENU,self.resetTimer)
        self.Bind(wx.EVT_ACTIVATE,self.resetTimer)
        self.Bind(common.EVT_MANPASS_FATALERR,self.OnFatal)
        self.Bind(common.EVT_MANPASS_PROGRESS,self.UpdateProgress)
        self.Bind(common.EVT_MANPASS_LOAD_DONE,self.LoadDone)



        # end wxGlade

    def __set_properties(self):
        # begin wxGlade: MainPannel.__set_properties
        self.text_ctrl_search_input.SetToolTip(wx.ToolTip(_("Type in keyword to search")))
        self.text_ctrl_search_input.ShowCancelButton(True)
        self.list_ctrl_1.SetFocus()

        # end wxGlade

    def __do_layout(self):
        # begin wxGlade: MainPannel.__do_layout

        self.sizer_all = wx.BoxSizer(wx.VERTICAL)
        self.sizer_all.Add(self.text_ctrl_search_input, 0, wx.BOTTOM | wx.EXPAND | wx.TOP, 5)
        self.sizer_all.Add(self.list_ctrl_1, 1, wx.EXPAND, 0)
        sizer_h=wx.BoxSizer(wx.HORIZONTAL)
        sizer_h.Add(self.lock_label,1,wx.ALIGN_CENTER_HORIZONTAL|wx.ALIGN_CENTER_VERTICAL|wx.TOP,0)
        self.sizer_all.Add(sizer_h,1,wx.ALIGN_CENTER_HORIZONTAL|wx.ALIGN_CENTER_VERTICAL|wx.TOP,0)
        self.lock_label.Hide()

        sizer_h2=wx.BoxSizer(wx.HORIZONTAL)
        sizer_h2.Add(self.progress_bar,1,wx.ALIGN_CENTER_HORIZONTAL|wx.ALIGN_CENTER_VERTICAL|wx.TOP,0)
        self.sizer_all.Add(sizer_h2,1,wx.ALIGN_CENTER_HORIZONTAL|wx.ALIGN_CENTER_VERTICAL|wx.TOP,0)
        self.progress_bar.Hide()
        #self.text_ctrl_search_input.Hide()
        #self.list_ctrl_1.Hide()

        self.SetSizer(self.sizer_all)
        self.sizer_all.Fit(self)

        self.Layout()
        # end wxGlade


    def setStatusTxt(self,txt):
        self.status_bar.SetStatusText(txt)

    def OnUnlock(self,evt):
        dlg=unlockDiag.UnlockDiag(self,self.uname)
        if dlg.ShowModal()==wx.ID_OK:
            if dlg.text_ctrl_upass.GetValue()==self.upass:
                self.unlock()
            else:
                wx.MessageBox(_("Wrong Password!"),_("Error"),0|wx.ICON_ERROR,self)
                return

    def unlock(self):
        self.lock_label.Hide()
        self.progress_bar.Hide()
        self.list_ctrl_1.Show(True)
        self.text_ctrl_search_input.Show(True)
        self.Layout()
        self.timer_lock.Start(self.confDict["idle_timer"]*1000,wx.TIMER_CONTINUOUS)

    def lock(self):
        self.timer_lock.Stop()
        self.list_ctrl_1.Show(False)
        self.text_ctrl_search_input.Show(False)
        self.lock_label.Show(True)
        self.progress_bar.Hide()
        self.Layout()

    def showLoading(self):
        self.timer_lock.Stop()
        self.list_ctrl_1.Show(False)
        self.text_ctrl_search_input.Show(False)
        self.lock_label.Show(False)
        self.progress_bar.Show(True)
        self.Layout()



    def OnFilter(self,evt):
        self.text_ctrl_search_input.ShowCancelButton(self.text_ctrl_search_input.GetValue()!="")
##        if self.text_ctrl_search_input.GetValue()=="":
##            self.text_ctrl_search_input.ShowCancelButton(False)
##        else:
##            self.text_ctrl_search_input.ShowCancelButton(True)
        self.list_ctrl_1.reloadWithoutGet()

    def OnFilterAct(self,evt):
        self.text_ctrl_search_input.Clear()
        self.list_ctrl_1.reloadWithoutGet()
        evt.Skip()

    def OnChar(self,evt):
        if evt.GetKeyCode()==wx.WXK_ESCAPE:
            self.text_ctrl_search_input.Clear()
        evt.Skip()

    def ShowAbout(self):
        info=wx.AboutDialogInfo()
        info.AddDeveloper("Hu Jun")
        info.SetIcon(self.icon)
        info.SetName("Manpass")
        info.SetDescription("A Secure Password Manager")
        info.SetVersion(unicode(self.version))
        info.SetWebSite("http://TBD.com")
        wx.AboutBox(info,self)

    def OnDClickTaskIcon(self,evt):
        self.Show()
        self.Raise()

    def HideMe(self,evt):
        self.Hide()


    def ExitMe(self):
        #do some cleanup
        self.taskicon.RemoveIcon()
        self.taskicon.Destroy()
        self.Destroy()

    def OnTimer(self,evt):
        if self.confDict['idle_timer']>0 and self.canlock:
            self.lock()


    def resetTimer(self,evt):
        self.timer_lock.Start(self.confDict['idle_timer']*1000,wx.TIMER_CONTINUOUS)
        if evt!=None:
            evt.Skip()

    def showOptionDiag(self):
        self.OptionDiag.ShowModal()
        self.confDict=self.OptionDiag.toDict()
        if self.confDict['idle_timer']<=0:
            self.timer_lock.Stop()
        else:
            self.timer_lock.Stop()
            self.timer_lock.Start(self.confDict['idle_timer']*1000,wx.TIMER_CONTINUOUS)


    def OnFatal(self,evt):
        wx.MessageBox(evt.Value+_("\n Application will now exit\n"),_("Fatal Error"),0|wx.ICON_ERROR,self)
        self.ExitMe()

    def UpdateProgress(self,evt):
        self.progress_bar.SetRange(evt.Range)
        self.progress_bar.SetValue(evt.Pos)

    def LoadDone(self,evt):
        self.setStatusTxt(_(""))
        self.list_ctrl_1.passlist=evt.Passlist
        for p in self.list_ctrl_1.passlist:
            p["PYS"]=self.list_ctrl_1.cnsort.strToPYS(p["Meta"].lower())
        self.list_ctrl_1.reloadWithoutGet()
        self.canlock=True
        self.unlock()





# end of class MainPannel

if __name__ == "__main__":
    logfilename="manpass.log"
    app = wx.App(False,logfilename)
    mainwin=MainPannel(parent=None)
    mainwin.Show()
    app.SetTopWindow(mainwin)
    app.MainLoop()
